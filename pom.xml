<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
		 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>de.gerdi-project</groupId>
	<artifactId>GeRDI-parent</artifactId>
	<version>4.1.0</version>
	
	<packaging>pom</packaging>
	<name>GeRDI Parent Pom</name>
	<description>This is a parent pom for GeRDI projects. It provides SpotBugs and PMD testing.</description>
	<url>http://www.gerdi-project.de</url>

	<properties>
		<!-- Plugin Versions -->
		<compiler.plugin.version>3.8.0</compiler.plugin.version>
		<dependency.plugin.version>3.1.1</dependency.plugin.version>
		<exec.plugin.version>1.6.0</exec.plugin.version>
		<gpg.plugin.version>1.6</gpg.plugin.version>
		<jar.plugin.version>3.0.2</jar.plugin.version>
		<javadoc.plugin.version>3.0.1</javadoc.plugin.version>
		<jetty.plugin.version>9.3.11.v20160721</jetty.plugin.version>
		<jxr.plugin.version>2.5</jxr.plugin.version>
		<license.plugin.version>3.0</license.plugin.version>
		<lombok.plugin.version>1.18.6.0</lombok.plugin.version>
		<pmd.plugin.version>3.11.0</pmd.plugin.version>
		<war.plugin.version>3.2.2</war.plugin.version>
		<source.plugin.version>3.0.1</source.plugin.version>
		<spotbugs.plugin.version>3.1.11</spotbugs.plugin.version>
		<staging.plugin.version>1.6.7</staging.plugin.version>
		<surefire.plugin.version>2.22.0</surefire.plugin.version>

		<!-- Dependency Versions -->
		<hamcrest.dependency.version>1.3</hamcrest.dependency.version>
		<harvesterutils.dependency.version>1.5.3</harvesterutils.dependency.version>
		<javaxws.dependency.version>2.3.1</javaxws.dependency.version>
		<junit.dependency.version>4.12</junit.dependency.version>
		<logbackclassic.dependency.version>1.2.3</logbackclassic.dependency.version>
		<lombok.dependency.version>1.18.4</lombok.dependency.version>
		<slf4j.dependency.version>1.7.25</slf4j.dependency.version>
		<spotbugs.annotations.dependency.version>3.1.12</spotbugs.annotations.dependency.version>

		<!-- Misc. Properties -->
		<invalid.script.extensions>*</invalid.script.extensions>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<reports.directory>target/reports/</reports.directory>

		<!-- Code Check -->
		<cpd.goal>cpd</cpd.goal>
		<pmd.goal>pmd</pmd.goal>
		<skip.codecheck>false</skip.codecheck>
		<skip.formattingcheck>true</skip.formattingcheck>
		<spotbugs.goal>spotbugs</spotbugs.goal>
	</properties>

	<licenses>
		<license>
			<name>The Apache License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
		</license>
	</licenses>

	<profiles>
		<profile>
			<id>war</id>
			<activation>
				<file>
					<exists>Dockerfile</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<!-- Generate war and move it to /target/ folder -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-war-plugin</artifactId>
						<version>${war.plugin.version}</version>
						<configuration>
							<outputDirectory>${project.build.directory}</outputDirectory>
							<archiveClasses>true</archiveClasses>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>jar</id>
			<activation>
				<file>
					<missing>Dockerfile</missing>
				</file>
			</activation>
			<build>
				<plugins>
					<!-- Generate jar and move it to /target/ folder -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jar-plugin</artifactId>
						<version>${jar.plugin.version}</version>
						<configuration>
							<outputDirectory>${project.build.directory}</outputDirectory>
							<excludes>
								<exclude>**/de/gerdiproject/generator/**</exclude>
							</excludes>
						</configuration>
					</plugin>
					
					<!-- Use Delombok to add javadoc for Lombok generated methods -->
					<plugin>
						<groupId>org.projectlombok</groupId>
						<artifactId>lombok-maven-plugin</artifactId>
						<version>${lombok.plugin.version}</version>
						<executions>
							<execution>
								<id>delombok</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>delombok</goal>
								</goals>
								<configuration>
									<sourceDirectory>${project.basedir}/src/main/java</sourceDirectory>
									<outputDirectory>${project.build.directory}/delombok</outputDirectory>
									<addOutputDirectory>false</addOutputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Add javadoc -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<version>${javadoc.plugin.version}</version>
						<executions>
							<execution>
								<id>attach-javadocs</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<sourcepath>${project.build.directory}/delombok</sourcepath>
							<outputDirectory>${project.build.directory}/javadoc</outputDirectory>
							<quiet>true</quiet>
						</configuration>
					</plugin>
					
					<!-- Add sources -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-source-plugin</artifactId>
						<version>${source.plugin.version}</version>
						<executions>
							<execution>
								<id>attach-sources</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<outputDirectory>${project.build.directory}</outputDirectory>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>deployment</id>
			<activation>
				<property>
					<name>deploy</name>
				</property>
			</activation>
			<build>
				<plugins>
					<!-- Sign artifacts -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>${gpg.plugin.version}</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!-- Stage to maven central -->
					<plugin>
						<groupId>org.sonatype.plugins</groupId>
						<artifactId>nexus-staging-maven-plugin</artifactId>
						<version>${staging.plugin.version}</version>
						<extensions>true</extensions>
						<configuration>
							<serverId>ossrh</serverId>
							<nexusUrl>https://oss.sonatype.org/</nexusUrl>
							<autoReleaseAfterClose>true</autoReleaseAfterClose>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- this profile causes the build to fail if any issues are found by PMD or SpotBugs-->
		<profile>
			<id>strictCodeCheck</id>
			<activation>
				<property>
					<name>check</name>
					<value>strict</value>
				</property>
			</activation>
			
			<properties>
				<spotbugs.goal>check</spotbugs.goal>
				<pmd.goal>check</pmd.goal>
				<cpd.goal>cpd-check</cpd.goal>
				<skip.formattingcheck>false</skip.formattingcheck>
			</properties>
		</profile>

		<!-- Disable CodeCheck -->
		<profile>
			<id>skipCodeCheck</id>
			<activation>
				<property>
					<name>check</name>
					<value>disabled</value>
				</property>
			</activation>
			<properties>
				<skip.codecheck>true</skip.codecheck>
			</properties>
		</profile>

		<!-- Eclipse Bug Fixes-->
		<profile>
			<id>eclipse</id>
			<activation>
				<property>
					<name>m2e.version</name>
				</property>
			</activation>
			<properties>
				<eclipselifecycle.plugin.version>1.0.0</eclipselifecycle.plugin.version>
			</properties>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>org.eclipse.m2e</groupId>
							<artifactId>lifecycle-mapping</artifactId>
							<version>${eclipselifecycle.plugin.version}</version>
							<configuration>
								<lifecycleMappingMetadata>
									<pluginExecutions>
										<pluginExecution>
											<!-- do not unpack HarvesterUtils in Eclipse-->
											<pluginExecutionFilter>
												<groupId>org.apache.maven.plugins</groupId>
												<artifactId>maven-dependency-plugin</artifactId>
												<versionRange>[${dependency.plugin.version},)</versionRange>
												<goals>
													<goal>
														unpack-dependencies
													</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore></ignore>
											</action>
										</pluginExecution>
										<pluginExecution>
										
										<!-- do not execute PMD in Eclipse-->
											<pluginExecutionFilter>
												<groupId>org.apache.maven.plugins</groupId>
												<artifactId>maven-pmd-plugin</artifactId>
												<versionRange>[${pmd.plugin.version},)</versionRange>
												<goals>
													<goal>pmd</goal>
													<goal>cpd</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore></ignore>
											</action>
										</pluginExecution>
										
										<!-- do not execute SpotBugs in Eclipse-->
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>com.github.spotbugs</groupId>
												<artifactId>spotbugs-maven-plugin</artifactId>
												<versionRange>[${spotbugs.plugin.version},)</versionRange>
												<goals>
													<goal>
														spotbugs
													</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore></ignore>
											</action>
										</pluginExecution>
										
										<!-- do not execute AStyle in Eclipse-->
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>org.codehaus.mojo</groupId>
												<artifactId>exec-maven-plugin</artifactId>
												<versionRange>[${exec.plugin.version},)</versionRange>
												<goals>
													<goal>
														exec
													</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore></ignore>
											</action>
										</pluginExecution>
										
										<!-- do not execute Delombok in Eclipse-->
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>org.projectlombok</groupId>
												<artifactId>lombok-maven-plugin</artifactId>
												<versionRange>[${lombok.plugin.version},)</versionRange>
												<goals>
													<goal>
														delombok
													</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore></ignore>
											</action>
										</pluginExecution>
									</pluginExecutions>
								</lifecycleMappingMetadata>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>

		<!-- Profile that is activated on Windows -->
		<profile>
			<id>windows</id>
			<activation>
				<os>
					<family>Windows</family>
				</os>
			</activation>
			<properties>
				<script.extension>bat</script.extension>
				<invalid.script.extensions>**/*.sh</invalid.script.extensions>
			</properties>
		</profile>

		<!-- Profile that is activated on Linux -->
		<profile>
			<id>unix</id>
			<activation>
				<os>
					<family>unix</family>
				</os>
			</activation>
			<properties>
				<script.extension>sh</script.extension>
				<invalid.script.extensions>**/*.bat</invalid.script.extensions>
			</properties>
		</profile>

		<!-- Profile that is activated on Macs -->
		<profile>
			<id>mac</id>
			<activation>
				<os> 
					<family>mac</family>
				</os>
			</activation>
			<properties>
				<script.extension>sh</script.extension>
				<invalid.script.extensions>**/*.bat</invalid.script.extensions>
			</properties>
		</profile>

		<profile>
			<id>java8</id>
			<activation>
				<jdk>1.8</jdk>
			</activation>
			<properties>
				<java.version>1.8</java.version>
			</properties>
			
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<version>${compiler.plugin.version}</version>
						<configuration>
							<source>${java.version}</source>
							<target>${java.version}</target>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>java11</id>
				<activation>
					<jdk>11</jdk>
				</activation>
			<properties>
				<java.version>11</java.version>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<version>${compiler.plugin.version}</version>
						<configuration>
							<release>${java.version}</release>
						</configuration>
					</plugin>
				</plugins>
			</build>
			<dependencies>
				<!-- https://mvnrepository.com/artifact/javax.xml.ws/jaxws-api -->
				<dependency>
					<groupId>javax.xml.ws</groupId>
					<artifactId>jaxws-api</artifactId>
					<version>${javaxws.dependency.version}</version>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<id>ensureLicenseHeaders</id>
			<activation>
				<property>
					<name>addHeaders</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${exec.plugin.version}</version>
						<executions>
							<execution>
								<id>Add License Headers</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${project.build.directory}/harvester-utils/scripts/addLicenses.${script.extension}</executable>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>ensureLicenseHeadersInternal</id>
			<activation>
				<property>
					<name>addHeadersInternal</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>com.mycila</groupId>
						<artifactId>license-maven-plugin</artifactId>
						<version>${license.plugin.version}</version>
						<executions>
							<execution>
								<id>Add License Headers Internal</id>
								<phase>process-sources</phase>
								<goals>
									<goal>format</goal>
								</goals>
								<configuration>
									<header>com/mycila/maven/plugin/license/templates/APACHE-2.txt</header>
									<properties>
										<email>http://www.gerdi-project.de</email>
									</properties>
									<includes>
										<include>**/*.java</include>
										<include>**/*.sh</include>
										<include>**/*.bat</include>
									</includes>
									<excludes>
										<exclude>${project.build.directory}/harvester-utils/scripts/**/*</exclude>
									</excludes>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- Auto-formats all files -->
			<id>formatFiles</id>
			<activation>
				<property>
					<name>format</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${exec.plugin.version}</version>
						<executions>
							<execution>
								<id>Format Code</id>
								<phase>process-sources</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${project.build.directory}/harvester-utils/scripts/formatting/astyle-format.${script.extension}</executable>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>dockerBuild</id>
			<activation>
				<property>
					<name>dockerBuild</name>
				</property>
				<file>
					<exists>Dockerfile</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${exec.plugin.version}</version>
						<executions>
							<execution>
								<id>Docker Build</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${project.build.directory}/harvester-utils/scripts/docker-build.${script.extension}</executable>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>dockerRun</id>
			<activation>
				<property>
					<name>run</name>
					<value>docker</value>
				</property>
				<file>
					<exists>Dockerfile</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${exec.plugin.version}</version>
						<executions>
							<execution>
								<id>Docker Build and Run</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${project.build.directory}/harvester-utils/scripts/docker-run.${script.extension}</executable>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>jettyRun</id>
			<activation>
				<property>
					<name>run</name>
					<value>jetty</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.eclipse.jetty</groupId>
						<artifactId>jetty-maven-plugin</artifactId>
						<version>${jetty.plugin.version}</version>
						<executions>
							<execution>
								<id>Run Jetty</id>
								<phase>package</phase>
								<goals>
									<goal>deploy-war</goal>
								</goals>
								<configuration>
									<webApp>
										<contextPath>/${project.artifactId}</contextPath>
										<tempDirectory>${project.build.directory}/jetty</tempDirectory>
									</webApp>
									<daemon>false</daemon>
									<systemProperties>
										<systemProperty>
											<name>DEPLOYMENT_TYPE</name>
											<value>jetty</value>
										</systemProperty>
									</systemProperties>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<build>
		<finalName>${project.artifactId}_${project.version}</finalName>
		<directory>target/</directory>

		<plugins>
			<!-- Unpack Utilities -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>${dependency.plugin.version}</version>
				<executions>
					<execution>
						<id>unpack-shared-resources</id>
						<goals>
							<goal>unpack-dependencies</goal>
						</goals>
						<phase>initialize</phase>
						<configuration>
							<!--<includes>setup/**</includes>-->
							<outputDirectory>${basedir}</outputDirectory>
							<excludeTransitive>true</excludeTransitive>
							<overWrite>false</overWrite>
							<includeGroupIds>de.gerdi-project</includeGroupIds>
							<includeTypes>zip</includeTypes>
							<excludes>${invalid.script.extensions}</excludes>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Surefire -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${surefire.plugin.version}</version>
				<configuration>
					<skipTests>${skip.codecheck}</skipTests>
				</configuration>
			</plugin>

			<!-- PMD -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>${pmd.plugin.version}</version>
				<configuration>
					<linkXRef>true</linkXRef>
					<targetJdk>${java.version}</targetJdk>
					<includeTests>false</includeTests>
					<failOnViolation>true</failOnViolation>
					<printFailingErrors>true</printFailingErrors>
					<targetDirectory>${reports.directory}</targetDirectory>
					<skip>${skip.codecheck}</skip>
					<rulesets>
						<ruleset>target/harvester-utils/pmd/gerdi-ruleset.xml</ruleset>
					</rulesets>
				</configuration>
				<executions>
					<execution>
						<phase>process-test-sources</phase>
						<goals>
							<goal>${pmd.goal}</goal>
							<goal>${cpd.goal}</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- SpotBugs -->
			<plugin>
				<groupId>com.github.spotbugs</groupId>
				<artifactId>spotbugs-maven-plugin</artifactId>
				<version>${spotbugs.plugin.version}</version>
				<configuration>
					<effort>Max</effort>
					<threshold>Max</threshold>
					<includeTests>true</includeTests>
					<failOnError>true</failOnError>
					<xmlOutput>true</xmlOutput>
					<xmlOutputDirectory>${reports.directory}</xmlOutputDirectory>
					<skip>${skip.codecheck}</skip>
				</configuration>
				<executions>
					<execution>
						<phase>process-test-sources</phase>
						<goals>
							<goal>${spotbugs.goal}</goal>
						</goals>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>junit</groupId>
						<artifactId>junit</artifactId>
						<version>${junit.dependency.version}</version>
					</dependency>
					<dependency>
						<groupId>org.hamcrest</groupId>
						<artifactId>hamcrest-library</artifactId>
						<version>${hamcrest.dependency.version}</version>
					</dependency>
				</dependencies>
			</plugin>

			<!-- AStyle Check -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>${exec.plugin.version}</version>
				<executions>
					<execution>
						<id>Code Format Check</id>
						<phase>process-test-sources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<skip>${skip.formattingcheck}</skip>
							<executable>${project.build.directory}/harvester-utils/scripts/formatting/astyle-check.${script.extension}</executable>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<!-- https://mvnrepository.com/artifact/com.github.spotbugs/spotbugs-annotations -->
		<dependency>
			<groupId>com.github.spotbugs</groupId>
			<artifactId>spotbugs-annotations</artifactId>
			<version>${spotbugs.annotations.dependency.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- required for logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.dependency.version}</version>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logbackclassic.dependency.version}</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.dependency.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.dependency.version}</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>de.gerdi-project</groupId>
			<artifactId>GeRDI-harvester-utilities-archive</artifactId>
			<version>${harvesterutils.dependency.version}</version>
			<classifier>resources</classifier>
			<type>zip</type>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<reporting>
		<plugins>
			<!-- PMD -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>${pmd.plugin.version}</version>
			</plugin>

			<!-- resolves PMD issue: [WARNING] Unable to locate Source XRef to link to - DISABLED -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
				<version>${jxr.plugin.version}</version>
			</plugin>

			<!-- SpotBugs -->
			<plugin>
				<groupId>com.github.spotbugs</groupId>
				<artifactId>spotbugs-maven-plugin</artifactId>
				<version>${spotbugs.plugin.version}</version>
			</plugin>
		</plugins>
	</reporting>

	<distributionManagement>
		<snapshotRepository>
			<id>ossrh</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>

		<repository>
			<id>ossrh</id>
			<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
		</repository>
	</distributionManagement>

	<developers>
		<developer>
			<name>Robin Weiss</name>
			<email>row@informatik.uni-kiel.de</email>
			<organization>Kiel University</organization>
			<organizationUrl>http://www.uni-kiel.de/index-e.shtml</organizationUrl>
		</developer>
	</developers>

	<scm>
		<connection>scm:git:ssh://git@code.gerdi-project.de:7999/hl/parentpoms.git</connection>
		<developerConnection>scm:git:ssh://git@code.gerdi-project.de:7999/hl/parentpoms.git</developerConnection>
		<url>https://code.gerdi-project.de/scm/hl/parentpoms.git</url>
		<tag>HEAD</tag>
	</scm>

	<!-- Define Sonatype repository for retrieving SNAPSHOT versions -->
	<repositories>
		<repository>
			<id>Sonatype</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots/</url>
		</repository>

		<repository>
			<id>projectlombok.org</id>
			<url>http://projectlombok.org/mavenrepo</url>
		</repository>
	</repositories>
</project>
