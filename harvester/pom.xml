<project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>de.gerdi-project</groupId>
		<artifactId>GeRDI-parent</artifactId>
		<version>3.0.0-SNAPSHOT</version>
	</parent>
	
	<artifactId>GeRDI-parent-harvester</artifactId>
	<version>6.2.0-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>GeRDI Parent Pom for Harvesters</name>
	<description>This is a parent pom for GeRDI harvester implementations</description>
	
	<properties>
		<compiler.plugin.version>3.6.1</compiler.plugin.version>
		<war.plugin.version>3.1.0</war.plugin.version>
		<exec.plugin.version>1.1.1</exec.plugin.version>
		<license.plugin.version>3.0</license.plugin.version>
		<dependency.plugin.version>3.0.2</dependency.plugin.version>
		<restfulharvester.dependency.version>6.1.1-SNAPSHOT</restfulharvester.dependency.version>
		<harvesterutils.dependency.version>1.3.0-SNAPSHOT</harvesterutils.dependency.version>
		<jersey.dependency.version>2.26</jersey.dependency.version>
	</properties>
	
	<build>
		<plugins>
			<!-- Unpack Utilities -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>${dependency.plugin.version}</version>
				<executions>
					<execution>
						<id>unpack-shared-resources</id>
						<goals>
							<goal>unpack-dependencies</goal>
						</goals>
						<phase>generate-resources</phase>
						<configuration>
							<!--<includes>setup/**</includes>-->
							<outputDirectory>${basedir}</outputDirectory>
							<excludeTransitive>true</excludeTransitive>
							<overWrite>false</overWrite>
							<includeGroupIds>de.gerdi-project</includeGroupIds>
							<includeTypes>zip</includeTypes>
							<excludes>${invalid.script.extensions}</excludes>
						</configuration>
					</execution>
				</executions>
			</plugin>
		
			<!-- Compile Java -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${compiler.plugin.version}</version>
				<configuration>
				  <source>${java.version}</source>
				  <target>${java.version}</target>
				</configuration>
			</plugin>
			  
			<!-- Generate war and move it to /target/ folder -->          
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>${war.plugin.version}</version>
				<configuration>
					<outputDirectory>${project.build.directory}</outputDirectory>
				</configuration>
			</plugin>
		</plugins>
	</build>
	
	<profiles>
		<profile>
			<id>dockerBuild</id>
			<activation>
				<property>
					<name>dockerBuild</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${exec.plugin.version}</version>
						<executions>
							<execution>
								<id>Docker Build</id>
								<phase>verify</phase>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<executable>scripts/docker-build.${script.extension}</executable>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>dockerRun</id>
			<activation>
				<property>
					<name>dockerRun</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${exec.plugin.version}</version>
						<executions>
							<execution>
								<id>Docker Build and Run</id>
								<phase>verify</phase>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<executable>scripts/docker-run.${script.extension}</executable>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<!-- Extend the already existing "strict" profile by adding a formatting check -->
			<id>strictCodeCheck</id>
			<activation>
				<property>
					<name>check</name>
					<value>strict</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${exec.plugin.version}</version>
						<executions>
							<execution>
								<id>Code Format Check</id>
								<phase>test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<executable>scripts/formatting/astyle-check.${script.extension}</executable>
						</configuration>
					</plugin>
				</plugins>
			</build>				
		</profile>
		<profile>
			<!-- Auto-formats all files -->
			<id>formatFiles</id>
			<activation>
				<property>
					<name>format</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${exec.plugin.version}</version>
						<executions>
							<execution>
								<id>Format Code</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<executable>scripts/formatting/astyle-format.${script.extension}</executable>
						</configuration>
					</plugin>
				</plugins>
			</build>				
		</profile>
		<profile>
			<id>addLicenseHeaders</id>
			<activation>
				<property>
					<name>addHeaders</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>com.mycila</groupId>
						<artifactId>license-maven-plugin</artifactId>
						<version>${license.plugin.version}</version>
						<configuration>
							<header>com/mycila/maven/plugin/license/templates/APACHE-2.txt</header>
							<properties>
								<email>http://www.gerdi-project.de</email>
							</properties>
							<includes>
								<include>**/*.java</include>
								<include>**/*.sh</include>
								<include>**/*.bat</include>
							</includes>
						</configuration>
						<executions>
							<execution>
								<phase>process-sources</phase>
								<goals>
									<goal>format</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	
	<dependencies>
		<dependency>
			<groupId>de.gerdi-project</groupId>
			<artifactId>RestfulHarvester-Library</artifactId>
			<version>${restfulharvester.dependency.version}</version>
		</dependency>
		<dependency>
			<groupId>de.gerdi-project</groupId>
			<artifactId>GeRDI-harvester-utilities-archive</artifactId>
			<version>${harvesterutils.dependency.version}</version>
			<classifier>resources</classifier>
			<type>zip</type>
			<!-- Make sure this isn't included on any classpath-->
			<scope>provided</scope>
		</dependency>
		
		<!-- Required by Jetty -->
		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-servlet</artifactId>
			<version>${jersey.dependency.version}</version>
		</dependency>

		<!-- Required by Jetty -->
		<dependency>
			<groupId>org.glassfish.jersey.inject</groupId>
			<artifactId>jersey-hk2</artifactId>
			<version>${jersey.dependency.version}</version>
		</dependency>
	</dependencies>
	
	<!-- Define Sonatype repository for retrieving SNAPSHOT versions -->
	<repositories>
		<repository>
			<id>Sonatype</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots/</url>
		</repository>
	</repositories>
</project>